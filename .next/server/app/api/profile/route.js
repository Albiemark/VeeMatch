"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/profile/route";
exports.ids = ["app/api/profile/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("net");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fprofile%2Froute&page=%2Fapi%2Fprofile%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fprofile%2Froute.ts&appDir=C%3A%5CUsers%5Calbie%5CDocuments%5CGitHub%5CVeeMatch%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Calbie%5CDocuments%5CGitHub%5CVeeMatch&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fprofile%2Froute&page=%2Fapi%2Fprofile%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fprofile%2Froute.ts&appDir=C%3A%5CUsers%5Calbie%5CDocuments%5CGitHub%5CVeeMatch%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Calbie%5CDocuments%5CGitHub%5CVeeMatch&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_albie_Documents_GitHub_VeeMatch_src_app_api_profile_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/profile/route.ts */ \"(rsc)/./src/app/api/profile/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/profile/route\",\n        pathname: \"/api/profile\",\n        filename: \"route\",\n        bundlePath: \"app/api/profile/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\albie\\\\Documents\\\\GitHub\\\\VeeMatch\\\\src\\\\app\\\\api\\\\profile\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_albie_Documents_GitHub_VeeMatch_src_app_api_profile_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/profile/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZwcm9maWxlJTJGcm91dGUmcGFnZT0lMkZhcGklMkZwcm9maWxlJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGcHJvZmlsZSUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNhbGJpZSU1Q0RvY3VtZW50cyU1Q0dpdEh1YiU1Q1ZlZU1hdGNoJTVDc3JjJTVDYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj1DJTNBJTVDVXNlcnMlNUNhbGJpZSU1Q0RvY3VtZW50cyU1Q0dpdEh1YiU1Q1ZlZU1hdGNoJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUMrQjtBQUM1RztBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL3ZlZS1tYXRjaC8/OWY0NyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJDOlxcXFxVc2Vyc1xcXFxhbGJpZVxcXFxEb2N1bWVudHNcXFxcR2l0SHViXFxcXFZlZU1hdGNoXFxcXHNyY1xcXFxhcHBcXFxcYXBpXFxcXHByb2ZpbGVcXFxccm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL3Byb2ZpbGUvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9wcm9maWxlXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9wcm9maWxlL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiQzpcXFxcVXNlcnNcXFxcYWxiaWVcXFxcRG9jdW1lbnRzXFxcXEdpdEh1YlxcXFxWZWVNYXRjaFxcXFxzcmNcXFxcYXBwXFxcXGFwaVxcXFxwcm9maWxlXFxcXHJvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9wcm9maWxlL3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fprofile%2Froute&page=%2Fapi%2Fprofile%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fprofile%2Froute.ts&appDir=C%3A%5CUsers%5Calbie%5CDocuments%5CGitHub%5CVeeMatch%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Calbie%5CDocuments%5CGitHub%5CVeeMatch&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/profile/route.ts":
/*!**************************************!*\
  !*** ./src/app/api/profile/route.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/supabase */ \"(rsc)/./src/lib/supabase.ts\");\n\n\nasync function GET(request) {\n    const userId = request.nextUrl.searchParams.get(\"userId\");\n    if (!userId) {\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"User ID is required\"\n        }, {\n            status: 400\n        });\n    }\n    try {\n        const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.from(\"profiles\").select(`id, user_id, display_name, age, gender, bio, profile_complete, photos(storage_path, is_primary)`).eq(\"user_id\", userId).maybeSingle();\n        if (error) {\n            console.error(\"Error fetching profile:\", error);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Failed to fetch profile\"\n            }, {\n                status: 500\n            });\n        }\n        if (!data) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(null, {\n                status: 404\n            });\n        }\n        // Format photo URLs if any exist\n        let formattedProfile = data;\n        formattedProfile.photo_url = undefined;\n        if (data.photos && data.photos.length > 0) {\n            // Find primary photo or use first one\n            const primaryPhoto = data.photos.find((photo)=>photo.is_primary);\n            const firstPhoto = data.photos[0];\n            const photoPath = primaryPhoto?.storage_path || firstPhoto?.storage_path;\n            if (photoPath) {\n                const { data: urlData } = _lib_supabase__WEBPACK_IMPORTED_MODULE_1__.supabase.storage.from(\"photos\").getPublicUrl(photoPath);\n                formattedProfile.photo_url = urlData.publicUrl;\n            }\n        }\n        // Remove photos array from response\n        delete formattedProfile.photos;\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(formattedProfile);\n    } catch (error) {\n        console.error(\"Unexpected error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Internal server error\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2FwaS9wcm9maWxlL3JvdXRlLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF3RDtBQUNkO0FBR25DLGVBQWVFLElBQUlDLE9BQW9CO0lBQzVDLE1BQU1DLFNBQVNELFFBQVFFLE9BQU8sQ0FBQ0MsWUFBWSxDQUFDQyxHQUFHLENBQUM7SUFFaEQsSUFBSSxDQUFDSCxRQUFRO1FBQ1gsT0FBT0oscURBQVlBLENBQUNRLElBQUksQ0FBQztZQUFFQyxPQUFPO1FBQXNCLEdBQUc7WUFBRUMsUUFBUTtRQUFJO0lBQzNFO0lBRUEsSUFBSTtRQUNGLE1BQU0sRUFBRUMsSUFBSSxFQUFFRixLQUFLLEVBQUUsR0FBRyxNQUFNUixtREFBUUEsQ0FDbkNXLElBQUksQ0FBQyxZQUNMQyxNQUFNLENBQUMsQ0FBQywrRkFBK0YsQ0FBQyxFQUN4R0MsRUFBRSxDQUFDLFdBQVdWLFFBQ2RXLFdBQVc7UUFFZCxJQUFJTixPQUFPO1lBQ1RPLFFBQVFQLEtBQUssQ0FBQywyQkFBMkJBO1lBQ3pDLE9BQU9ULHFEQUFZQSxDQUFDUSxJQUFJLENBQUM7Z0JBQUVDLE9BQU87WUFBMEIsR0FBRztnQkFBRUMsUUFBUTtZQUFJO1FBQy9FO1FBRUEsSUFBSSxDQUFDQyxNQUFNO1lBQ1QsT0FBT1gscURBQVlBLENBQUNRLElBQUksQ0FBQyxNQUFNO2dCQUFFRSxRQUFRO1lBQUk7UUFDL0M7UUFFQSxpQ0FBaUM7UUFDakMsSUFBSU8sbUJBQW1CTjtRQUN2Qk0saUJBQWlCQyxTQUFTLEdBQUdDO1FBRTdCLElBQUlSLEtBQUtTLE1BQU0sSUFBSVQsS0FBS1MsTUFBTSxDQUFDQyxNQUFNLEdBQUcsR0FBRztZQUN6QyxzQ0FBc0M7WUFDdEMsTUFBTUMsZUFBZVgsS0FBS1MsTUFBTSxDQUFDRyxJQUFJLENBQUMsQ0FBQ0MsUUFBZUEsTUFBTUMsVUFBVTtZQUN0RSxNQUFNQyxhQUFhZixLQUFLUyxNQUFNLENBQUMsRUFBRTtZQUNqQyxNQUFNTyxZQUFZTCxjQUFjTSxnQkFBZ0JGLFlBQVlFO1lBRTVELElBQUlELFdBQVc7Z0JBQ2IsTUFBTSxFQUFFaEIsTUFBTWtCLE9BQU8sRUFBRSxHQUFHNUIsbURBQVFBLENBQUM2QixPQUFPLENBQUNsQixJQUFJLENBQUMsVUFBVW1CLFlBQVksQ0FBQ0o7Z0JBQ3ZFVixpQkFBaUJDLFNBQVMsR0FBR1csUUFBUUcsU0FBUztZQUNoRDtRQUNGO1FBRUEsb0NBQW9DO1FBQ3BDLE9BQU9mLGlCQUFpQkcsTUFBTTtRQUU5QixPQUFPcEIscURBQVlBLENBQUNRLElBQUksQ0FBQ1M7SUFDM0IsRUFBRSxPQUFPUixPQUFPO1FBQ2RPLFFBQVFQLEtBQUssQ0FBQyxxQkFBcUJBO1FBQ25DLE9BQU9ULHFEQUFZQSxDQUFDUSxJQUFJLENBQUM7WUFBRUMsT0FBTztRQUF3QixHQUFHO1lBQUVDLFFBQVE7UUFBSTtJQUM3RTtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdmVlLW1hdGNoLy4vc3JjL2FwcC9hcGkvcHJvZmlsZS9yb3V0ZS50cz9mYjZhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XHJcbmltcG9ydCB7IHN1cGFiYXNlIH0gZnJvbSAnQC9saWIvc3VwYWJhc2UnO1xyXG5pbXBvcnQgeyBVc2VyUHJvZmlsZSB9IGZyb20gJ0AvdHlwZXMvcHJvZmlsZSc7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gR0VUKHJlcXVlc3Q6IE5leHRSZXF1ZXN0KSB7XHJcbiAgY29uc3QgdXNlcklkID0gcmVxdWVzdC5uZXh0VXJsLnNlYXJjaFBhcmFtcy5nZXQoJ3VzZXJJZCcpO1xyXG4gIFxyXG4gIGlmICghdXNlcklkKSB7XHJcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBlcnJvcjogJ1VzZXIgSUQgaXMgcmVxdWlyZWQnIH0sIHsgc3RhdHVzOiA0MDAgfSk7XHJcbiAgfVxyXG4gIFxyXG4gIHRyeSB7XHJcbiAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxyXG4gICAgICAuZnJvbSgncHJvZmlsZXMnKVxyXG4gICAgICAuc2VsZWN0KGBpZCwgdXNlcl9pZCwgZGlzcGxheV9uYW1lLCBhZ2UsIGdlbmRlciwgYmlvLCBwcm9maWxlX2NvbXBsZXRlLCBwaG90b3Moc3RvcmFnZV9wYXRoLCBpc19wcmltYXJ5KWApXHJcbiAgICAgIC5lcSgndXNlcl9pZCcsIHVzZXJJZClcclxuICAgICAgLm1heWJlU2luZ2xlKCk7XHJcbiAgICBcclxuICAgIGlmIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBwcm9maWxlOicsIGVycm9yKTtcclxuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgZXJyb3I6ICdGYWlsZWQgdG8gZmV0Y2ggcHJvZmlsZScgfSwgeyBzdGF0dXM6IDUwMCB9KTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYgKCFkYXRhKSB7XHJcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihudWxsLCB7IHN0YXR1czogNDA0IH0pO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBGb3JtYXQgcGhvdG8gVVJMcyBpZiBhbnkgZXhpc3RcclxuICAgIGxldCBmb3JtYXR0ZWRQcm9maWxlID0gZGF0YSBhcyB1bmtub3duIGFzIFBhcnRpYWw8VXNlclByb2ZpbGU+O1xyXG4gICAgZm9ybWF0dGVkUHJvZmlsZS5waG90b191cmwgPSB1bmRlZmluZWQ7XHJcbiAgICBcclxuICAgIGlmIChkYXRhLnBob3RvcyAmJiBkYXRhLnBob3Rvcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIC8vIEZpbmQgcHJpbWFyeSBwaG90byBvciB1c2UgZmlyc3Qgb25lXHJcbiAgICAgIGNvbnN0IHByaW1hcnlQaG90byA9IGRhdGEucGhvdG9zLmZpbmQoKHBob3RvOiBhbnkpID0+IHBob3RvLmlzX3ByaW1hcnkpO1xyXG4gICAgICBjb25zdCBmaXJzdFBob3RvID0gZGF0YS5waG90b3NbMF07XHJcbiAgICAgIGNvbnN0IHBob3RvUGF0aCA9IHByaW1hcnlQaG90bz8uc3RvcmFnZV9wYXRoIHx8IGZpcnN0UGhvdG8/LnN0b3JhZ2VfcGF0aDtcclxuICAgICAgXHJcbiAgICAgIGlmIChwaG90b1BhdGgpIHtcclxuICAgICAgICBjb25zdCB7IGRhdGE6IHVybERhdGEgfSA9IHN1cGFiYXNlLnN0b3JhZ2UuZnJvbSgncGhvdG9zJykuZ2V0UHVibGljVXJsKHBob3RvUGF0aCk7XHJcbiAgICAgICAgZm9ybWF0dGVkUHJvZmlsZS5waG90b191cmwgPSB1cmxEYXRhLnB1YmxpY1VybDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBSZW1vdmUgcGhvdG9zIGFycmF5IGZyb20gcmVzcG9uc2VcclxuICAgIGRlbGV0ZSBmb3JtYXR0ZWRQcm9maWxlLnBob3RvcztcclxuICAgIFxyXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKGZvcm1hdHRlZFByb2ZpbGUpO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdVbmV4cGVjdGVkIGVycm9yOicsIGVycm9yKTtcclxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IGVycm9yOiAnSW50ZXJuYWwgc2VydmVyIGVycm9yJyB9LCB7IHN0YXR1czogNTAwIH0pO1xyXG4gIH1cclxufSAiXSwibmFtZXMiOlsiTmV4dFJlc3BvbnNlIiwic3VwYWJhc2UiLCJHRVQiLCJyZXF1ZXN0IiwidXNlcklkIiwibmV4dFVybCIsInNlYXJjaFBhcmFtcyIsImdldCIsImpzb24iLCJlcnJvciIsInN0YXR1cyIsImRhdGEiLCJmcm9tIiwic2VsZWN0IiwiZXEiLCJtYXliZVNpbmdsZSIsImNvbnNvbGUiLCJmb3JtYXR0ZWRQcm9maWxlIiwicGhvdG9fdXJsIiwidW5kZWZpbmVkIiwicGhvdG9zIiwibGVuZ3RoIiwicHJpbWFyeVBob3RvIiwiZmluZCIsInBob3RvIiwiaXNfcHJpbWFyeSIsImZpcnN0UGhvdG8iLCJwaG90b1BhdGgiLCJzdG9yYWdlX3BhdGgiLCJ1cmxEYXRhIiwic3RvcmFnZSIsImdldFB1YmxpY1VybCIsInB1YmxpY1VybCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/profile/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/supabase.ts":
/*!*****************************!*\
  !*** ./src/lib/supabase.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   blockUser: () => (/* binding */ blockUser),\n/* harmony export */   createMatch: () => (/* binding */ createMatch),\n/* harmony export */   createProfile: () => (/* binding */ createProfile),\n/* harmony export */   deletePhoto: () => (/* binding */ deletePhoto),\n/* harmony export */   getBlockedUsers: () => (/* binding */ getBlockedUsers),\n/* harmony export */   getDiscoverProfiles: () => (/* binding */ getDiscoverProfiles),\n/* harmony export */   getMatchMessages: () => (/* binding */ getMatchMessages),\n/* harmony export */   getUserMatches: () => (/* binding */ getUserMatches),\n/* harmony export */   getUserNotifications: () => (/* binding */ getUserNotifications),\n/* harmony export */   getUserPhotos: () => (/* binding */ getUserPhotos),\n/* harmony export */   getUserPreferences: () => (/* binding */ getUserPreferences),\n/* harmony export */   getUserProfile: () => (/* binding */ getUserProfile),\n/* harmony export */   likeProfile: () => (/* binding */ likeProfile),\n/* harmony export */   markNotificationAsRead: () => (/* binding */ markNotificationAsRead),\n/* harmony export */   passProfile: () => (/* binding */ passProfile),\n/* harmony export */   sendMessage: () => (/* binding */ sendMessage),\n/* harmony export */   setPrimaryPhoto: () => (/* binding */ setPrimaryPhoto),\n/* harmony export */   supabase: () => (/* binding */ supabase),\n/* harmony export */   unblockUser: () => (/* binding */ unblockUser),\n/* harmony export */   updateMatchStatus: () => (/* binding */ updateMatchStatus),\n/* harmony export */   updateMessageStatus: () => (/* binding */ updateMessageStatus),\n/* harmony export */   updateProfile: () => (/* binding */ updateProfile),\n/* harmony export */   updateUserPreferences: () => (/* binding */ updateUserPreferences),\n/* harmony export */   uploadPhoto: () => (/* binding */ uploadPhoto)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\nif (false) {}\nif (false) {}\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(\"https://aangjhraanqtueazxwqa.supabase.co\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFhbmdqaHJhYW5xdHVlYXp4d3FhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI1NzUxMDIsImV4cCI6MjA1ODE1MTEwMn0.KZ_w94o0DcsoZD7FkEUxOdbyBX-zMGCv7fNh4Buzp7Y\");\n// Helper function to get user's profile\nasync function getUserProfile(userId) {\n    const { data, error } = await supabase.from(\"profiles\").select(\"*\").eq(\"user_id\", userId).single();\n    if (error) throw error;\n    return data;\n}\n// Helper function to create a new profile\nasync function createProfile(profileData) {\n    const { data, error } = await supabase.from(\"profiles\").insert([\n        profileData\n    ]).select().single();\n    if (error) throw error;\n    return data;\n}\n// Helper function to update a profile\nasync function updateProfile(userId, updates) {\n    const { data, error } = await supabase.from(\"profiles\").update(updates).eq(\"user_id\", userId).select().single();\n    if (error) throw error;\n    return data;\n}\n// Helper function to upload a photo\nasync function uploadPhoto(file, profileId) {\n    // First get the profile to get the user ID\n    const { data: profile, error: profileError } = await supabase.from(\"profiles\").select(\"user_id\").eq(\"id\", profileId).single();\n    if (profileError) throw profileError;\n    if (!profile) throw new Error(\"Profile not found\");\n    const fileExt = file.name.split(\".\").pop();\n    // Use the full Clerk user ID for the folder name\n    const fileName = `${profile.user_id}/${Math.random()}.${fileExt}`;\n    // Upload the file\n    const { error: uploadError } = await supabase.storage.from(\"photos\").upload(fileName, file, {\n        cacheControl: \"3600\",\n        upsert: false\n    });\n    if (uploadError) {\n        console.error(\"Upload error:\", uploadError);\n        throw uploadError;\n    }\n    const { data: { publicUrl } } = supabase.storage.from(\"photos\").getPublicUrl(fileName);\n    // Insert the photo record\n    const { data, error } = await supabase.from(\"photos\").insert([\n        {\n            profile_id: profileId,\n            storage_path: fileName,\n            order_index: 0\n        }\n    ]).select().single();\n    if (error) {\n        console.error(\"Database error:\", error);\n        throw error;\n    }\n    return {\n        ...data,\n        url: publicUrl\n    };\n}\n// Helper function to get user's photos\nasync function getUserPhotos(profileId) {\n    if (!profileId) {\n        throw new Error(\"Profile ID is required\");\n    }\n    try {\n        const { data, error } = await supabase.from(\"photos\").select(\"*\").eq(\"profile_id\", profileId).order(\"order_index\");\n        if (error) {\n            console.error(\"Supabase error:\", error);\n            throw error;\n        }\n        if (!data) {\n            return [];\n        }\n        // Add public URLs to each photo\n        return data.map((photo)=>{\n            if (!photo.storage_path) {\n                console.warn(\"Photo missing storage_path:\", photo);\n                return photo;\n            }\n            return {\n                ...photo,\n                url: supabase.storage.from(\"photos\").getPublicUrl(photo.storage_path).data.publicUrl\n            };\n        });\n    } catch (error) {\n        console.error(\"Error in getUserPhotos:\", error);\n        throw error;\n    }\n}\n// Helper function to delete a photo\nasync function deletePhoto(photoId) {\n    const { error } = await supabase.from(\"photos\").delete().eq(\"id\", photoId);\n    if (error) throw error;\n}\n// Helper function to get user's matches\nasync function getUserMatches(profileId) {\n    const { data, error } = await supabase.from(\"matches\").select(`\r\n      *,\r\n      user1:profiles!matches_user1_id_fkey(*),\r\n      user2:profiles!matches_user2_id_fkey(*)\r\n    `).or(`user1_id.eq.${profileId},user2_id.eq.${profileId}`);\n    if (error) throw error;\n    return data;\n}\n// Helper function to create a match\nasync function createMatch(user1Id, user2Id) {\n    const { data, error } = await supabase.from(\"matches\").insert([\n        {\n            user1_id: user1Id,\n            user2_id: user2Id,\n            status: \"pending\"\n        }\n    ]).select().single();\n    if (error) throw error;\n    return data;\n}\n// Helper function to update match status\nasync function updateMatchStatus(matchId, status) {\n    const { data, error } = await supabase.from(\"matches\").update({\n        status\n    }).eq(\"id\", matchId).select().single();\n    if (error) throw error;\n    return data;\n}\n// Helper function to get messages for a match\nasync function getMatchMessages(matchId) {\n    const { data, error } = await supabase.from(\"messages\").select(`\r\n      *,\r\n      sender:profiles!messages_sender_id_fkey(*)\r\n    `).eq(\"match_id\", matchId).order(\"created_at\");\n    if (error) throw error;\n    return data;\n}\n// Helper function to send a message\nasync function sendMessage(matchId, senderId, content) {\n    const { data, error } = await supabase.from(\"messages\").insert([\n        {\n            match_id: matchId,\n            sender_id: senderId,\n            content,\n            status: \"sent\"\n        }\n    ]).select().single();\n    if (error) throw error;\n    return data;\n}\n// Helper function to update message status\nasync function updateMessageStatus(messageId, status) {\n    const { data, error } = await supabase.from(\"messages\").update({\n        status\n    }).eq(\"id\", messageId).select().single();\n    if (error) throw error;\n    return data;\n}\n// Helper function to get user's preferences\nasync function getUserPreferences(profileId) {\n    const { data, error } = await supabase.from(\"user_preferences\").select(\"*\").eq(\"user_id\", profileId).maybeSingle();\n    if (error) throw error;\n    // Return default preferences if none found\n    if (!data) {\n        return {\n            user_id: profileId,\n            min_age: 18,\n            max_age: 99,\n            interested_in: [],\n            max_distance: 100,\n            show_me: true\n        };\n    }\n    return data;\n}\n// Helper function to update user preferences\nasync function updateUserPreferences(profileId, preferences) {\n    // Check if preferences already exist\n    const { data: existingPrefs, error: checkError } = await supabase.from(\"user_preferences\").select(\"user_id\").eq(\"user_id\", profileId).maybeSingle();\n    if (checkError) throw checkError;\n    // If preferences exist, update them\n    if (existingPrefs) {\n        const { data, error } = await supabase.from(\"user_preferences\").update({\n            ...preferences,\n            updated_at: new Date().toISOString()\n        }).eq(\"user_id\", profileId).select().single();\n        if (error) throw error;\n        return data;\n    }\n    // Otherwise create new preferences\n    const { data, error } = await supabase.from(\"user_preferences\").insert([\n        {\n            user_id: profileId,\n            min_age: preferences.min_age || 18,\n            max_age: preferences.max_age || 99,\n            interested_in: preferences.interested_in || [],\n            max_distance: preferences.max_distance || 100,\n            show_me: preferences.show_me !== undefined ? preferences.show_me : true\n        }\n    ]).select().single();\n    if (error) throw error;\n    return data;\n}\n// Helper function to get user's notifications\nasync function getUserNotifications(profileId) {\n    const { data, error } = await supabase.from(\"notifications\").select(\"*\").eq(\"user_id\", profileId).order(\"created_at\", {\n        ascending: false\n    });\n    if (error) throw error;\n    return data;\n}\n// Helper function to mark notification as read\nasync function markNotificationAsRead(notificationId) {\n    const { data, error } = await supabase.from(\"notifications\").update({\n        is_read: true\n    }).eq(\"id\", notificationId).select().single();\n    if (error) throw error;\n    return data;\n}\n// Helper function to block a user\nasync function blockUser(blockerId, blockedId) {\n    const { data, error } = await supabase.from(\"blocked_users\").insert([\n        {\n            blocker_id: blockerId,\n            blocked_id: blockedId\n        }\n    ]).select().single();\n    if (error) throw error;\n    return data;\n}\n// Helper function to unblock a user\nasync function unblockUser(blockerId, blockedId) {\n    const { error } = await supabase.from(\"blocked_users\").delete().eq(\"blocker_id\", blockerId).eq(\"blocked_id\", blockedId);\n    if (error) throw error;\n}\n// Helper function to get blocked users\nasync function getBlockedUsers(profileId) {\n    const { data, error } = await supabase.from(\"blocked_users\").select(`\r\n      *,\r\n      blocked:profiles!blocked_users_blocked_id_fkey(*)\r\n    `).eq(\"blocker_id\", profileId);\n    if (error) throw error;\n    return data;\n}\nasync function setPrimaryPhoto(profileId, photoId) {\n    try {\n        // First, unset any existing primary photo\n        const { error: unsetError } = await supabase.from(\"photos\").update({\n            is_primary: false\n        }).eq(\"profile_id\", profileId);\n        if (unsetError) throw unsetError;\n        // Then set the new primary photo\n        const { error: setError } = await supabase.from(\"photos\").update({\n            is_primary: true\n        }).eq(\"id\", photoId).eq(\"profile_id\", profileId);\n        if (setError) throw setError;\n        return {\n            success: true\n        };\n    } catch (error) {\n        console.error(\"Error setting primary photo:\", error);\n        throw error;\n    }\n}\n// Helper function to get potential matches (discover)\nasync function getDiscoverProfiles(userId) {\n    // First we need the current user's profile ID\n    const { data: userProfile, error: profileError } = await supabase.from(\"profiles\").select(\"id, gender\").eq(\"user_id\", userId).single();\n    if (profileError) throw profileError;\n    if (!userProfile) throw new Error(\"User profile not found\");\n    // Get user preferences if they exist, otherwise use defaults\n    const { data: preferences, error: prefError } = await supabase.from(\"user_preferences\").select(\"min_age, max_age, interested_in, max_distance\").eq(\"user_id\", userProfile.id).maybeSingle();\n    // Default preferences if none set\n    const minAge = preferences?.min_age || 18;\n    const maxAge = preferences?.max_age || 99;\n    const interestedIn = preferences?.interested_in || null; // null means any gender\n    // Get existing matches and blocks to exclude these users\n    const { data: matchedUsers, error: matchError } = await supabase.from(\"matches\").select(\"user1_id, user2_id\").or(`user1_id.eq.${userProfile.id},user2_id.eq.${userProfile.id}`);\n    if (matchError) throw matchError;\n    // Get blocked users\n    const { data: blockedUsers, error: blockError } = await supabase.from(\"blocked_users\").select(\"blocked_id\").eq(\"blocker_id\", userProfile.id);\n    if (blockError) throw blockError;\n    // Create arrays of users to exclude\n    const excludeIds = new Set();\n    excludeIds.add(userProfile.id); // Exclude self\n    // Add matched users to exclusion list\n    if (matchedUsers && matchedUsers.length > 0) {\n        matchedUsers.forEach((match)=>{\n            if (match.user1_id === userProfile.id) {\n                excludeIds.add(match.user2_id);\n            } else {\n                excludeIds.add(match.user1_id);\n            }\n        });\n    }\n    // Add blocked users to exclusion list\n    if (blockedUsers && blockedUsers.length > 0) {\n        blockedUsers.forEach((block)=>{\n            excludeIds.add(block.blocked_id);\n        });\n    }\n    // Convert exclusion set to array\n    const excludeIdsArray = Array.from(excludeIds);\n    // Build the query\n    let query = supabase.from(\"profiles\").select(`\r\n      *,\r\n      photos(storage_path, is_primary, order_index),\r\n      profile_passions(\r\n        passions(id, name)\r\n      )\r\n    `).eq(\"profile_complete\", true).not(\"id\", \"in\", `(${excludeIdsArray.join(\",\")})`).gte(\"age\", minAge).lte(\"age\", maxAge);\n    // Add gender filter if user has preferences\n    if (interestedIn && interestedIn.length > 0) {\n        query = query.in(\"gender\", interestedIn);\n    }\n    // Limit the number of profiles to return\n    query = query.limit(20);\n    const { data, error } = await query;\n    if (error) throw error;\n    // Transform the data to match our UserProfile interface\n    return data.map((profile)=>{\n        // Get the primary photo if available, otherwise the first photo\n        const primaryPhoto = profile.photos?.find((p)=>p.is_primary);\n        const firstPhoto = profile.photos?.length > 0 ? profile.photos[0] : null;\n        const photoPath = primaryPhoto?.storage_path || firstPhoto?.storage_path;\n        // Get photo URL if there's a path\n        const photoUrl = photoPath ? supabase.storage.from(\"photos\").getPublicUrl(photoPath).data.publicUrl : null;\n        // Transform passions to a simple array of strings\n        const passions = profile.profile_passions?.map((pp)=>pp.passions?.name) || [];\n        return {\n            id: profile.id,\n            user_id: profile.user_id,\n            display_name: profile.display_name,\n            age: profile.age,\n            gender: profile.gender,\n            bio: profile.bio,\n            occupation: profile.occupation,\n            education: profile.education,\n            location_city: profile.location_city,\n            location_country: profile.location_country,\n            photos: photoUrl ? [\n                photoUrl\n            ] : [],\n            relationship_goals: profile.relationship_goals,\n            drinking: profile.drinking,\n            smoking: profile.smoking,\n            children: profile.children,\n            profile_complete: profile.profile_complete,\n            created_at: profile.created_at,\n            updated_at: profile.updated_at,\n            passions\n        };\n    });\n}\n// Helper function to like a profile (create a pending match)\nasync function likeProfile(currentProfileId, targetProfileId) {\n    // Check if there's already a match where the current user is user2\n    const { data: existingMatch, error: matchError } = await supabase.from(\"matches\").select(\"id, status\").eq(\"user1_id\", targetProfileId).eq(\"user2_id\", currentProfileId).maybeSingle();\n    if (matchError) throw matchError;\n    // If there's an existing match (the other user liked us first), update it to matched\n    if (existingMatch) {\n        const { data, error } = await supabase.from(\"matches\").update({\n            status: \"matched\",\n            updated_at: new Date().toISOString()\n        }).eq(\"id\", existingMatch.id).select().single();\n        if (error) throw error;\n        return {\n            ...data,\n            isNewMatch: true\n        };\n    }\n    // Otherwise create a new pending match\n    const { data, error } = await supabase.from(\"matches\").insert([\n        {\n            user1_id: currentProfileId,\n            user2_id: targetProfileId,\n            status: \"pending\"\n        }\n    ]).select().single();\n    if (error) throw error;\n    return {\n        ...data,\n        isNewMatch: false\n    };\n}\n// Helper function to pass (reject) a profile\nasync function passProfile(currentProfileId, targetProfileId) {\n    // Check if there's already a match where the current user is user2\n    const { data: existingMatch, error: matchError } = await supabase.from(\"matches\").select(\"id\").eq(\"user1_id\", targetProfileId).eq(\"user2_id\", currentProfileId).maybeSingle();\n    if (matchError) throw matchError;\n    // If there's an existing match, update it to rejected\n    if (existingMatch) {\n        const { data, error } = await supabase.from(\"matches\").update({\n            status: \"rejected\",\n            updated_at: new Date().toISOString()\n        }).eq(\"id\", existingMatch.id).select().single();\n        if (error) throw error;\n        return data;\n    }\n    // Otherwise create a new rejected match\n    const { data, error } = await supabase.from(\"matches\").insert([\n        {\n            user1_id: currentProfileId,\n            user2_id: targetProfileId,\n            status: \"rejected\"\n        }\n    ]).select().single();\n    if (error) throw error;\n    return data;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/supabase.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@supabase","vendor-chunks/tr46","vendor-chunks/whatwg-url","vendor-chunks/webidl-conversions"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fprofile%2Froute&page=%2Fapi%2Fprofile%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fprofile%2Froute.ts&appDir=C%3A%5CUsers%5Calbie%5CDocuments%5CGitHub%5CVeeMatch%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Calbie%5CDocuments%5CGitHub%5CVeeMatch&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();